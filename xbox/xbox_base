UNAME_S := $(shell uname -s)
UNAME_M := $(shell uname -m)

ifeq ($(UNAME_S),Linux)
LD           = lld -flavor link
LIB          = llvm-lib
AS           = clang
CC           = clang
CXX          = clang++
ifneq ($(UNAME_M),x86_64)
CGC          = $(NXDK_DIR)/tools/cg/linux/cgc.i386
else
CGC          = $(NXDK_DIR)/tools/cg/linux/cgc
endif #UNAME_M != x86_64
endif
ifeq ($(UNAME_S),Darwin)
LD           = /usr/local/opt/llvm/bin/lld -flavor link
LIB          = /usr/local/opt/llvm/bin/llvm-lib
AS           = /usr/local/opt/llvm/bin/clang
CC           = /usr/local/opt/llvm/bin/clang
CXX          = /usr/local/opt/llvm/bin/clang++
CGC          = $(NXDK_DIR)/tools/cg/mac/cgc
endif
ifneq (,$(findstring MSYS_NT,$(UNAME_S)))
$(error Please use a MinGW64 shell)
endif
ifneq (,$(findstring MINGW,$(UNAME_S)))
LD           = lld-link
LIB          = llvm-lib
AS           = clang
CC           = clang
CXX          = clang++
CGC          = $(NXDK_DIR)/tools/cg/win/cgc
endif

CXBE         = $(NXDK_DIR)/tools/cxbe/cxbe
VP20COMPILER = $(NXDK_DIR)/tools/vp20compiler/vp20compiler
FP20COMPILER = $(NXDK_DIR)/tools/fp20compiler/fp20compiler
EXTRACT_XISO = $(NXDK_DIR)/tools/extract-xiso/build/extract-xiso
NXDK_TOOLS   = cxbe vp20compiler fp20compiler extract-xiso
NXDK_CFLAGS  = -target i386-pc-win32 -march=pentium3 \
               -ffreestanding -nostdlib -fno-builtin \
               -I$(NXDK_DIR)/lib -I$(NXDK_DIR)/lib/xboxrt/libc_extensions \
               -I$(NXDK_DIR)/lib/hal \
               -isystem $(NXDK_DIR)/lib/pdclib/include \
               -I$(NXDK_DIR)/lib/pdclib/platform/xbox/include \
               -I$(NXDK_DIR)/lib/winapi \
               -I$(NXDK_DIR)/lib/xboxrt/vcruntime \
               -Wno-ignored-attributes -DNXDK -D__STDC__=1
NXDK_ASFLAGS = -target i386-pc-win32 -march=pentium3 \
               -nostdlib -I$(NXDK_DIR)/lib -I$(NXDK_DIR)/lib/xboxrt
NXDK_CXXFLAGS = -I$(NXDK_DIR)/lib/libcxx/include $(NXDK_CFLAGS) -fno-exceptions
NXDK_LDFLAGS = -subsystem:windows -fixed:no -entry:XboxCRTEntry \
               -stack:$(NXDK_STACKSIZE) -safeseh:no -include:__fltused -include:__xlibc_check_stack

# Multithreaded LLD on Windows hang workaround
ifneq (,$(findstring MINGW,$(UNAME_S)))
NXDK_LDFLAGS += -threads:1
endif

ifeq ($(DEBUG),y)
NXDK_ASFLAGS += -g -gdwarf-4
NXDK_CFLAGS += -g -gdwarf-4
NXDK_CXXFLAGS += -g -gdwarf-4
NXDK_LDFLAGS += -debug
endif
